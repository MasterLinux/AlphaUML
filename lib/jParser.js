jParser = (function(){
  /* Generated by PEG.js 0.6.1 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "Array": parse_Array,
        "Class": parse_Class,
        "ClassBody": parse_ClassBody,
        "DataType": parse_DataType,
        "DataTypeKeyword": parse_DataTypeKeyword,
        "EndOfLine": parse_EndOfLine,
        "File": parse_File,
        "Generic": parse_Generic,
        "Identifier": parse_Identifier,
        "JavaDigit": parse_JavaDigit,
        "JavaDocAuthor": parse_JavaDocAuthor,
        "JavaDocComment": parse_JavaDocComment,
        "JavaDocException": parse_JavaDocException,
        "JavaDocParam": parse_JavaDocParam,
        "JavaDocReturn": parse_JavaDocReturn,
        "JavaDocSee": parse_JavaDocSee,
        "JavaDocSince": parse_JavaDocSince,
        "JavaDocTag": parse_JavaDocTag,
        "JavaDocThrows": parse_JavaDocThrows,
        "JavaDocUML": parse_JavaDocUML,
        "JavaLetter": parse_JavaLetter,
        "Keyword": parse_Keyword,
        "Method": parse_Method,
        "ModifierKeyword": parse_ModifierKeyword,
        "MultiLineComment": parse_MultiLineComment,
        "Parameter": parse_Parameter,
        "ParameterList": parse_ParameterList,
        "SingleLineComment": parse_SingleLineComment,
        "Space": parse_Space,
        "UnusedKeyword": parse_UnusedKeyword,
        "Variable": parse_Variable,
        "VisibilityKeyword": parse_VisibilityKeyword,
        "WhiteSpace": parse_WhiteSpace,
        "__": parse___
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "File";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_File() {
        var cacheKey = 'File@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result35 = parse_JavaDocComment();
        var result2 = result35 !== null ? result35 : '';
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            var savedPos4 = pos;
            var result26 = parse___();
            if (result26 !== null) {
              if (input.substr(pos, 7) === "package") {
                var result27 = "package";
                pos += 7;
              } else {
                var result27 = null;
                if (reportMatchFailures) {
                  matchFailed("\"package\"");
                }
              }
              if (result27 !== null) {
                var result28 = parse___();
                if (result28 !== null) {
                  var savedPos5 = pos;
                  var savedReportMatchFailuresVar2 = reportMatchFailures;
                  reportMatchFailures = false;
                  if (input.substr(pos, 1) === ";") {
                    var result34 = ";";
                    pos += 1;
                  } else {
                    var result34 = null;
                    if (reportMatchFailures) {
                      matchFailed("\";\"");
                    }
                  }
                  reportMatchFailures = savedReportMatchFailuresVar2;
                  if (result34 === null) {
                    var result29 = '';
                  } else {
                    var result29 = null;
                    pos = savedPos5;
                  }
                  if (result29 !== null) {
                    var result30 = parse_Identifier();
                    if (result30 !== null) {
                      var result31 = parse___();
                      if (result31 !== null) {
                        if (input.substr(pos, 1) === ";") {
                          var result32 = ";";
                          pos += 1;
                        } else {
                          var result32 = null;
                          if (reportMatchFailures) {
                            matchFailed("\";\"");
                          }
                        }
                        if (result32 !== null) {
                          var result33 = parse___();
                          if (result33 !== null) {
                            var result25 = [result26, result27, result28, result29, result30, result31, result32, result33];
                          } else {
                            var result25 = null;
                            pos = savedPos4;
                          }
                        } else {
                          var result25 = null;
                          pos = savedPos4;
                        }
                      } else {
                        var result25 = null;
                        pos = savedPos4;
                      }
                    } else {
                      var result25 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result25 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result25 = null;
                  pos = savedPos4;
                }
              } else {
                var result25 = null;
                pos = savedPos4;
              }
            } else {
              var result25 = null;
              pos = savedPos4;
            }
            var result24 = result25 !== null
              ? (function($p) {return $p;})(result25[4])
              : null;
            var result4 = result24 !== null ? result24 : '';
            if (result4 !== null) {
              var result5 = [];
              var savedPos2 = pos;
              var result14 = parse___();
              if (result14 !== null) {
                if (input.substr(pos, 6) === "import") {
                  var result15 = "import";
                  pos += 6;
                } else {
                  var result15 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"import\"");
                  }
                }
                if (result15 !== null) {
                  var result16 = parse___();
                  if (result16 !== null) {
                    var savedPos3 = pos;
                    var savedReportMatchFailuresVar1 = reportMatchFailures;
                    reportMatchFailures = false;
                    if (input.substr(pos, 1) === ";") {
                      var result23 = ";";
                      pos += 1;
                    } else {
                      var result23 = null;
                      if (reportMatchFailures) {
                        matchFailed("\";\"");
                      }
                    }
                    reportMatchFailures = savedReportMatchFailuresVar1;
                    if (result23 === null) {
                      var result17 = '';
                    } else {
                      var result17 = null;
                      pos = savedPos3;
                    }
                    if (result17 !== null) {
                      if (input.substr(pos).match(/^[0-9A-Za-z_$.*]/) !== null) {
                        var result22 = input.charAt(pos);
                        pos++;
                      } else {
                        var result22 = null;
                        if (reportMatchFailures) {
                          matchFailed("[0-9A-Za-z_$.*]");
                        }
                      }
                      if (result22 !== null) {
                        var result18 = [];
                        while (result22 !== null) {
                          result18.push(result22);
                          if (input.substr(pos).match(/^[0-9A-Za-z_$.*]/) !== null) {
                            var result22 = input.charAt(pos);
                            pos++;
                          } else {
                            var result22 = null;
                            if (reportMatchFailures) {
                              matchFailed("[0-9A-Za-z_$.*]");
                            }
                          }
                        }
                      } else {
                        var result18 = null;
                      }
                      if (result18 !== null) {
                        var result19 = parse___();
                        if (result19 !== null) {
                          if (input.substr(pos, 1) === ";") {
                            var result20 = ";";
                            pos += 1;
                          } else {
                            var result20 = null;
                            if (reportMatchFailures) {
                              matchFailed("\";\"");
                            }
                          }
                          if (result20 !== null) {
                            var result21 = parse___();
                            if (result21 !== null) {
                              var result13 = [result14, result15, result16, result17, result18, result19, result20, result21];
                            } else {
                              var result13 = null;
                              pos = savedPos2;
                            }
                          } else {
                            var result13 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result13 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result13 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result13 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result13 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result13 = null;
                  pos = savedPos2;
                }
              } else {
                var result13 = null;
                pos = savedPos2;
              }
              var result12 = result13 !== null
                ? (function($i) {return $i.join("");})(result13[4])
                : null;
              while (result12 !== null) {
                result5.push(result12);
                var savedPos2 = pos;
                var result14 = parse___();
                if (result14 !== null) {
                  if (input.substr(pos, 6) === "import") {
                    var result15 = "import";
                    pos += 6;
                  } else {
                    var result15 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"import\"");
                    }
                  }
                  if (result15 !== null) {
                    var result16 = parse___();
                    if (result16 !== null) {
                      var savedPos3 = pos;
                      var savedReportMatchFailuresVar1 = reportMatchFailures;
                      reportMatchFailures = false;
                      if (input.substr(pos, 1) === ";") {
                        var result23 = ";";
                        pos += 1;
                      } else {
                        var result23 = null;
                        if (reportMatchFailures) {
                          matchFailed("\";\"");
                        }
                      }
                      reportMatchFailures = savedReportMatchFailuresVar1;
                      if (result23 === null) {
                        var result17 = '';
                      } else {
                        var result17 = null;
                        pos = savedPos3;
                      }
                      if (result17 !== null) {
                        if (input.substr(pos).match(/^[0-9A-Za-z_$.*]/) !== null) {
                          var result22 = input.charAt(pos);
                          pos++;
                        } else {
                          var result22 = null;
                          if (reportMatchFailures) {
                            matchFailed("[0-9A-Za-z_$.*]");
                          }
                        }
                        if (result22 !== null) {
                          var result18 = [];
                          while (result22 !== null) {
                            result18.push(result22);
                            if (input.substr(pos).match(/^[0-9A-Za-z_$.*]/) !== null) {
                              var result22 = input.charAt(pos);
                              pos++;
                            } else {
                              var result22 = null;
                              if (reportMatchFailures) {
                                matchFailed("[0-9A-Za-z_$.*]");
                              }
                            }
                          }
                        } else {
                          var result18 = null;
                        }
                        if (result18 !== null) {
                          var result19 = parse___();
                          if (result19 !== null) {
                            if (input.substr(pos, 1) === ";") {
                              var result20 = ";";
                              pos += 1;
                            } else {
                              var result20 = null;
                              if (reportMatchFailures) {
                                matchFailed("\";\"");
                              }
                            }
                            if (result20 !== null) {
                              var result21 = parse___();
                              if (result21 !== null) {
                                var result13 = [result14, result15, result16, result17, result18, result19, result20, result21];
                              } else {
                                var result13 = null;
                                pos = savedPos2;
                              }
                            } else {
                              var result13 = null;
                              pos = savedPos2;
                            }
                          } else {
                            var result13 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result13 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result13 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result13 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result13 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result13 = null;
                  pos = savedPos2;
                }
                var result12 = result13 !== null
                  ? (function($i) {return $i.join("");})(result13[4])
                  : null;
              }
              if (result5 !== null) {
                var result6 = parse___();
                if (result6 !== null) {
                  var result11 = parse_Class();
                  if (result11 !== null) {
                    var result7 = [];
                    while (result11 !== null) {
                      result7.push(result11);
                      var result11 = parse_Class();
                    }
                  } else {
                    var result7 = null;
                  }
                  if (result7 !== null) {
                    var result8 = parse___();
                    if (result8 !== null) {
                      var savedPos1 = pos;
                      var savedReportMatchFailuresVar0 = reportMatchFailures;
                      reportMatchFailures = false;
                      if (input.length > pos) {
                        var result10 = input.charAt(pos);
                        pos++;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed('any character');
                        }
                      }
                      reportMatchFailures = savedReportMatchFailuresVar0;
                      if (result10 === null) {
                        var result9 = '';
                      } else {
                        var result9 = null;
                        pos = savedPos1;
                      }
                      if (result9 !== null) {
                        var result1 = [result2, result3, result4, result5, result6, result7, result8, result9];
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function($p, $i, $c) {
                  return {
                      package: $p !== "" ? $p : null,
                      imports: $i !== "" ? $i : null,
                      classes: $c
                  };
              })(result1[2], result1[3], result1[5])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Class() {
        var cacheKey = 'Class@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result44 = parse_JavaDocComment();
        var result2 = result44 !== null ? result44 : '';
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            var result43 = parse_VisibilityKeyword();
            var result4 = result43 !== null ? result43 : '';
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                var result6 = [];
                var savedPos4 = pos;
                var result41 = parse_ModifierKeyword();
                if (result41 !== null) {
                  var result42 = parse___();
                  if (result42 !== null) {
                    var result40 = [result41, result42];
                  } else {
                    var result40 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result40 = null;
                  pos = savedPos4;
                }
                var result39 = result40 !== null
                  ? (function($m) {return $m;})(result40[0])
                  : null;
                while (result39 !== null) {
                  result6.push(result39);
                  var savedPos4 = pos;
                  var result41 = parse_ModifierKeyword();
                  if (result41 !== null) {
                    var result42 = parse___();
                    if (result42 !== null) {
                      var result40 = [result41, result42];
                    } else {
                      var result40 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result40 = null;
                    pos = savedPos4;
                  }
                  var result39 = result40 !== null
                    ? (function($m) {return $m;})(result40[0])
                    : null;
                }
                if (result6 !== null) {
                  if (input.substr(pos, 5) === "class") {
                    var result38 = "class";
                    pos += 5;
                  } else {
                    var result38 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"class\"");
                    }
                  }
                  if (result38 !== null) {
                    var result7 = result38;
                  } else {
                    if (input.substr(pos, 9) === "interface") {
                      var result37 = "interface";
                      pos += 9;
                    } else {
                      var result37 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"interface\"");
                      }
                    }
                    if (result37 !== null) {
                      var result7 = result37;
                    } else {
                      if (input.substr(pos, 4) === "enum") {
                        var result36 = "enum";
                        pos += 4;
                      } else {
                        var result36 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"enum\"");
                        }
                      }
                      if (result36 !== null) {
                        var result7 = result36;
                      } else {
                        var result7 = null;;
                      };
                    };
                  }
                  if (result7 !== null) {
                    var result8 = parse___();
                    if (result8 !== null) {
                      var result9 = parse_Identifier();
                      if (result9 !== null) {
                        var result10 = parse___();
                        if (result10 !== null) {
                          var savedPos3 = pos;
                          if (input.substr(pos, 7) === "extends") {
                            var result32 = "extends";
                            pos += 7;
                          } else {
                            var result32 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"extends\"");
                            }
                          }
                          if (result32 !== null) {
                            var result33 = parse___();
                            if (result33 !== null) {
                              var result34 = parse_Identifier();
                              if (result34 !== null) {
                                var result35 = parse___();
                                if (result35 !== null) {
                                  var result31 = [result32, result33, result34, result35];
                                } else {
                                  var result31 = null;
                                  pos = savedPos3;
                                }
                              } else {
                                var result31 = null;
                                pos = savedPos3;
                              }
                            } else {
                              var result31 = null;
                              pos = savedPos3;
                            }
                          } else {
                            var result31 = null;
                            pos = savedPos3;
                          }
                          var result30 = result31 !== null
                            ? (function($e) {return $e;})(result31[2])
                            : null;
                          var result11 = result30 !== null ? result30 : '';
                          if (result11 !== null) {
                            var savedPos1 = pos;
                            if (input.substr(pos, 10) === "implements") {
                              var result19 = "implements";
                              pos += 10;
                            } else {
                              var result19 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"implements\"");
                              }
                            }
                            if (result19 !== null) {
                              var result20 = parse___();
                              if (result20 !== null) {
                                var savedPos2 = pos;
                                var result24 = parse___();
                                if (result24 !== null) {
                                  if (input.substr(pos, 1) === ",") {
                                    var result29 = ",";
                                    pos += 1;
                                  } else {
                                    var result29 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\",\"");
                                    }
                                  }
                                  var result25 = result29 !== null ? result29 : '';
                                  if (result25 !== null) {
                                    var result26 = parse___();
                                    if (result26 !== null) {
                                      var result27 = parse_Identifier();
                                      if (result27 !== null) {
                                        var result28 = parse___();
                                        if (result28 !== null) {
                                          var result23 = [result24, result25, result26, result27, result28];
                                        } else {
                                          var result23 = null;
                                          pos = savedPos2;
                                        }
                                      } else {
                                        var result23 = null;
                                        pos = savedPos2;
                                      }
                                    } else {
                                      var result23 = null;
                                      pos = savedPos2;
                                    }
                                  } else {
                                    var result23 = null;
                                    pos = savedPos2;
                                  }
                                } else {
                                  var result23 = null;
                                  pos = savedPos2;
                                }
                                var result22 = result23 !== null
                                  ? (function($i) {return $i})(result23[3])
                                  : null;
                                if (result22 !== null) {
                                  var result21 = [];
                                  while (result22 !== null) {
                                    result21.push(result22);
                                    var savedPos2 = pos;
                                    var result24 = parse___();
                                    if (result24 !== null) {
                                      if (input.substr(pos, 1) === ",") {
                                        var result29 = ",";
                                        pos += 1;
                                      } else {
                                        var result29 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\",\"");
                                        }
                                      }
                                      var result25 = result29 !== null ? result29 : '';
                                      if (result25 !== null) {
                                        var result26 = parse___();
                                        if (result26 !== null) {
                                          var result27 = parse_Identifier();
                                          if (result27 !== null) {
                                            var result28 = parse___();
                                            if (result28 !== null) {
                                              var result23 = [result24, result25, result26, result27, result28];
                                            } else {
                                              var result23 = null;
                                              pos = savedPos2;
                                            }
                                          } else {
                                            var result23 = null;
                                            pos = savedPos2;
                                          }
                                        } else {
                                          var result23 = null;
                                          pos = savedPos2;
                                        }
                                      } else {
                                        var result23 = null;
                                        pos = savedPos2;
                                      }
                                    } else {
                                      var result23 = null;
                                      pos = savedPos2;
                                    }
                                    var result22 = result23 !== null
                                      ? (function($i) {return $i})(result23[3])
                                      : null;
                                  }
                                } else {
                                  var result21 = null;
                                }
                                if (result21 !== null) {
                                  var result18 = [result19, result20, result21];
                                } else {
                                  var result18 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result18 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result18 = null;
                              pos = savedPos1;
                            }
                            var result17 = result18 !== null
                              ? (function($i) {return $i;})(result18[2])
                              : null;
                            var result12 = result17 !== null ? result17 : '';
                            if (result12 !== null) {
                              if (input.substr(pos, 1) === "{") {
                                var result13 = "{";
                                pos += 1;
                              } else {
                                var result13 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"{\"");
                                }
                              }
                              if (result13 !== null) {
                                var result14 = parse___();
                                if (result14 !== null) {
                                  var result15 = parse_ClassBody();
                                  if (result15 !== null) {
                                    if (input.substr(pos, 1) === "}") {
                                      var result16 = "}";
                                      pos += 1;
                                    } else {
                                      var result16 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"}\"");
                                      }
                                    }
                                    if (result16 !== null) {
                                      var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16];
                                    } else {
                                      var result1 = null;
                                      pos = savedPos0;
                                    }
                                  } else {
                                    var result1 = null;
                                    pos = savedPos0;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos0;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function($jd, $v, $m, $t, $n, $e, $i, $b) {
                  return {
                      type: $t,
                      javaDoc: $jd != "" ? $jd : null,
                      visibility: $v != "" ? $v : null,
                      modifier: $m,
                      name: $n,
                      extend: $e !== "" ? $e : null,
                      implement: $i,
                      body: $b
                  };
              })(result1[0], result1[2], result1[4], result1[5], result1[7], result1[9], result1[10], result1[13])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ClassBody() {
        var cacheKey = 'ClassBody@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = [];
        var result8 = parse_Method();
        if (result8 !== null) {
          var result2 = result8;
        } else {
          var result7 = parse_Variable();
          if (result7 !== null) {
            var result2 = result7;
          } else {
            var result6 = parse_WhiteSpace();
            var result5 = result6 !== null
              ? (function() {return "";})()
              : null;
            if (result5 !== null) {
              var result2 = result5;
            } else {
              var result4 = parse_EndOfLine();
              var result3 = result4 !== null
                ? (function() {return "";})()
                : null;
              if (result3 !== null) {
                var result2 = result3;
              } else {
                var result2 = null;;
              };
            };
          };
        }
        while (result2 !== null) {
          result1.push(result2);
          var result8 = parse_Method();
          if (result8 !== null) {
            var result2 = result8;
          } else {
            var result7 = parse_Variable();
            if (result7 !== null) {
              var result2 = result7;
            } else {
              var result6 = parse_WhiteSpace();
              var result5 = result6 !== null
                ? (function() {return "";})()
                : null;
              if (result5 !== null) {
                var result2 = result5;
              } else {
                var result4 = parse_EndOfLine();
                var result3 = result4 !== null
                  ? (function() {return "";})()
                  : null;
                if (result3 !== null) {
                  var result2 = result3;
                } else {
                  var result2 = null;;
                };
              };
            };
          }
        }
        var result0 = result1 !== null
          ? (function($m) {
                  var result = {};
                  for (var i = 0; i < $m.length; i++) {
                      //add variables
                      if($m[i].type == "variable") {
                          //if variable array doesn't exists create once
                          if(!result["variable"]) result["variable"] = [];
                          //push variable into array
                          result.variable.push($m[i]);
                      }
          
                      //add methods
                      else if($m[i].type == "method") {
                          //if method array doesn't exists create once
                          if(!result["method"]) result["method"] = [];
                          //push variable into array
                          result.method.push($m[i]);
                      }
                  }
          
                  return result;
              })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Method() {
        var cacheKey = 'Method@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result44 = parse_JavaDocComment();
        var result2 = result44 !== null ? result44 : '';
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            var savedPos8 = pos;
            var result42 = parse_VisibilityKeyword();
            if (result42 !== null) {
              var result43 = parse___();
              if (result43 !== null) {
                var result41 = [result42, result43];
              } else {
                var result41 = null;
                pos = savedPos8;
              }
            } else {
              var result41 = null;
              pos = savedPos8;
            }
            var result40 = result41 !== null
              ? (function($v) {return $v;})(result41[0])
              : null;
            var result4 = result40 !== null ? result40 : '';
            if (result4 !== null) {
              var result5 = [];
              var savedPos7 = pos;
              var result38 = parse_ModifierKeyword();
              if (result38 !== null) {
                var result39 = parse___();
                if (result39 !== null) {
                  var result37 = [result38, result39];
                } else {
                  var result37 = null;
                  pos = savedPos7;
                }
              } else {
                var result37 = null;
                pos = savedPos7;
              }
              var result36 = result37 !== null
                ? (function($m) {return $m;})(result37[0])
                : null;
              while (result36 !== null) {
                result5.push(result36);
                var savedPos7 = pos;
                var result38 = parse_ModifierKeyword();
                if (result38 !== null) {
                  var result39 = parse___();
                  if (result39 !== null) {
                    var result37 = [result38, result39];
                  } else {
                    var result37 = null;
                    pos = savedPos7;
                  }
                } else {
                  var result37 = null;
                  pos = savedPos7;
                }
                var result36 = result37 !== null
                  ? (function($m) {return $m;})(result37[0])
                  : null;
              }
              if (result5 !== null) {
                var savedPos5 = pos;
                var result31 = parse_DataType();
                if (result31 !== null) {
                  var result32 = parse___();
                  if (result32 !== null) {
                    var savedPos6 = pos;
                    var savedReportMatchFailuresVar1 = reportMatchFailures;
                    reportMatchFailures = false;
                    if (input.substr(pos, 1) === "(") {
                      var result35 = "(";
                      pos += 1;
                    } else {
                      var result35 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"(\"");
                      }
                    }
                    reportMatchFailures = savedReportMatchFailuresVar1;
                    if (result35 === null) {
                      var result33 = '';
                    } else {
                      var result33 = null;
                      pos = savedPos6;
                    }
                    if (result33 !== null) {
                      var result34 = parse___();
                      if (result34 !== null) {
                        var result30 = [result31, result32, result33, result34];
                      } else {
                        var result30 = null;
                        pos = savedPos5;
                      }
                    } else {
                      var result30 = null;
                      pos = savedPos5;
                    }
                  } else {
                    var result30 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result30 = null;
                  pos = savedPos5;
                }
                var result29 = result30 !== null
                  ? (function($d) {return $d;})(result30[0])
                  : null;
                var result6 = result29 !== null ? result29 : '';
                if (result6 !== null) {
                  var result7 = parse_Identifier();
                  if (result7 !== null) {
                    var result8 = parse___();
                    if (result8 !== null) {
                      if (input.substr(pos, 1) === "(") {
                        var result9 = "(";
                        pos += 1;
                      } else {
                        var result9 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"(\"");
                        }
                      }
                      if (result9 !== null) {
                        var result10 = parse_ParameterList();
                        if (result10 !== null) {
                          if (input.substr(pos, 1) === ")") {
                            var result11 = ")";
                            pos += 1;
                          } else {
                            var result11 = null;
                            if (reportMatchFailures) {
                              matchFailed("\")\"");
                            }
                          }
                          if (result11 !== null) {
                            var result12 = parse___();
                            if (result12 !== null) {
                              var savedPos2 = pos;
                              if (input.substr(pos, 1) === "{") {
                                var result21 = "{";
                                pos += 1;
                              } else {
                                var result21 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"{\"");
                                }
                              }
                              if (result21 !== null) {
                                var result22 = [];
                                var savedPos3 = pos;
                                var savedPos4 = pos;
                                var savedReportMatchFailuresVar0 = reportMatchFailures;
                                reportMatchFailures = false;
                                if (input.substr(pos, 1) === "}") {
                                  var result28 = "}";
                                  pos += 1;
                                } else {
                                  var result28 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"}\"");
                                  }
                                }
                                reportMatchFailures = savedReportMatchFailuresVar0;
                                if (result28 === null) {
                                  var result26 = '';
                                } else {
                                  var result26 = null;
                                  pos = savedPos4;
                                }
                                if (result26 !== null) {
                                  if (input.length > pos) {
                                    var result27 = input.charAt(pos);
                                    pos++;
                                  } else {
                                    var result27 = null;
                                    if (reportMatchFailures) {
                                      matchFailed('any character');
                                    }
                                  }
                                  if (result27 !== null) {
                                    var result25 = [result26, result27];
                                  } else {
                                    var result25 = null;
                                    pos = savedPos3;
                                  }
                                } else {
                                  var result25 = null;
                                  pos = savedPos3;
                                }
                                var result24 = result25 !== null
                                  ? (function($b) {return $b;})(result25[1])
                                  : null;
                                while (result24 !== null) {
                                  result22.push(result24);
                                  var savedPos3 = pos;
                                  var savedPos4 = pos;
                                  var savedReportMatchFailuresVar0 = reportMatchFailures;
                                  reportMatchFailures = false;
                                  if (input.substr(pos, 1) === "}") {
                                    var result28 = "}";
                                    pos += 1;
                                  } else {
                                    var result28 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"}\"");
                                    }
                                  }
                                  reportMatchFailures = savedReportMatchFailuresVar0;
                                  if (result28 === null) {
                                    var result26 = '';
                                  } else {
                                    var result26 = null;
                                    pos = savedPos4;
                                  }
                                  if (result26 !== null) {
                                    if (input.length > pos) {
                                      var result27 = input.charAt(pos);
                                      pos++;
                                    } else {
                                      var result27 = null;
                                      if (reportMatchFailures) {
                                        matchFailed('any character');
                                      }
                                    }
                                    if (result27 !== null) {
                                      var result25 = [result26, result27];
                                    } else {
                                      var result25 = null;
                                      pos = savedPos3;
                                    }
                                  } else {
                                    var result25 = null;
                                    pos = savedPos3;
                                  }
                                  var result24 = result25 !== null
                                    ? (function($b) {return $b;})(result25[1])
                                    : null;
                                }
                                if (result22 !== null) {
                                  if (input.substr(pos, 1) === "}") {
                                    var result23 = "}";
                                    pos += 1;
                                  } else {
                                    var result23 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"}\"");
                                    }
                                  }
                                  if (result23 !== null) {
                                    var result20 = [result21, result22, result23];
                                  } else {
                                    var result20 = null;
                                    pos = savedPos2;
                                  }
                                } else {
                                  var result20 = null;
                                  pos = savedPos2;
                                }
                              } else {
                                var result20 = null;
                                pos = savedPos2;
                              }
                              var result19 = result20 !== null
                                ? (function($b) {return $b;})(result20[1])
                                : null;
                              if (result19 !== null) {
                                var result13 = result19;
                              } else {
                                var savedPos1 = pos;
                                var result16 = parse___();
                                if (result16 !== null) {
                                  if (input.substr(pos, 1) === ";") {
                                    var result17 = ";";
                                    pos += 1;
                                  } else {
                                    var result17 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\";\"");
                                    }
                                  }
                                  if (result17 !== null) {
                                    var result18 = parse___();
                                    if (result18 !== null) {
                                      var result15 = [result16, result17, result18];
                                    } else {
                                      var result15 = null;
                                      pos = savedPos1;
                                    }
                                  } else {
                                    var result15 = null;
                                    pos = savedPos1;
                                  }
                                } else {
                                  var result15 = null;
                                  pos = savedPos1;
                                }
                                var result14 = result15 !== null
                                  ? (function() {return "";})()
                                  : null;
                                if (result14 !== null) {
                                  var result13 = result14;
                                } else {
                                  var result13 = null;;
                                };
                              }
                              if (result13 !== null) {
                                var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                              } else {
                                var result1 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function($jd, $v, $m, $d, $n, $pl, $b) {
                  return {
                      type: "method",
                      javaDoc: $jd !== "" ? $jd : null,
                      name: $n,
                      visibility: $v !== "" ? $v : null,
                      modifier: $m,
                      dataType: $d !== "" ? $d.dataType : "constructor",
                      generic: $d !== "" ? $d.generic : null,
                      array: $d !== "" ? $d.array : null,
                      parameter: $pl,
                      body: $b && $b !== "" ? $b.join("") : null
                  };
              })(result1[0], result1[2], result1[3], result1[4], result1[5], result1[8], result1[11])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Variable() {
        var cacheKey = 'Variable@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result35 = parse_JavaDocComment();
        var result2 = result35 !== null ? result35 : '';
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            var savedPos6 = pos;
            var result33 = parse_VisibilityKeyword();
            if (result33 !== null) {
              var result34 = parse___();
              if (result34 !== null) {
                var result32 = [result33, result34];
              } else {
                var result32 = null;
                pos = savedPos6;
              }
            } else {
              var result32 = null;
              pos = savedPos6;
            }
            var result31 = result32 !== null
              ? (function($v) {return $v;})(result32[0])
              : null;
            var result4 = result31 !== null ? result31 : '';
            if (result4 !== null) {
              var result5 = [];
              var savedPos5 = pos;
              var result29 = parse_ModifierKeyword();
              if (result29 !== null) {
                var result30 = parse___();
                if (result30 !== null) {
                  var result28 = [result29, result30];
                } else {
                  var result28 = null;
                  pos = savedPos5;
                }
              } else {
                var result28 = null;
                pos = savedPos5;
              }
              var result27 = result28 !== null
                ? (function($m) {return $m;})(result28[0])
                : null;
              while (result27 !== null) {
                result5.push(result27);
                var savedPos5 = pos;
                var result29 = parse_ModifierKeyword();
                if (result29 !== null) {
                  var result30 = parse___();
                  if (result30 !== null) {
                    var result28 = [result29, result30];
                  } else {
                    var result28 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result28 = null;
                  pos = savedPos5;
                }
                var result27 = result28 !== null
                  ? (function($m) {return $m;})(result28[0])
                  : null;
              }
              if (result5 !== null) {
                var result6 = parse_DataType();
                if (result6 !== null) {
                  var result7 = parse___();
                  if (result7 !== null) {
                    var savedPos4 = pos;
                    var savedReportMatchFailuresVar1 = reportMatchFailures;
                    reportMatchFailures = false;
                    if (input.substr(pos, 1) === "=") {
                      var result26 = "=";
                      pos += 1;
                    } else {
                      var result26 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"=\"");
                      }
                    }
                    if (result26 !== null) {
                      var result24 = result26;
                    } else {
                      if (input.substr(pos, 1) === ";") {
                        var result25 = ";";
                        pos += 1;
                      } else {
                        var result25 = null;
                        if (reportMatchFailures) {
                          matchFailed("\";\"");
                        }
                      }
                      if (result25 !== null) {
                        var result24 = result25;
                      } else {
                        var result24 = null;;
                      };
                    }
                    reportMatchFailures = savedReportMatchFailuresVar1;
                    if (result24 === null) {
                      var result8 = '';
                    } else {
                      var result8 = null;
                      pos = savedPos4;
                    }
                    if (result8 !== null) {
                      var result9 = parse___();
                      if (result9 !== null) {
                        var result10 = parse_Identifier();
                        if (result10 !== null) {
                          var result11 = parse___();
                          if (result11 !== null) {
                            var savedPos1 = pos;
                            if (input.substr(pos, 1) === "=") {
                              var result16 = "=";
                              pos += 1;
                            } else {
                              var result16 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"=\"");
                              }
                            }
                            if (result16 !== null) {
                              var result17 = parse___();
                              if (result17 !== null) {
                                var result18 = [];
                                var savedPos2 = pos;
                                var savedPos3 = pos;
                                var savedReportMatchFailuresVar0 = reportMatchFailures;
                                reportMatchFailures = false;
                                if (input.substr(pos, 1) === ";") {
                                  var result23 = ";";
                                  pos += 1;
                                } else {
                                  var result23 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\";\"");
                                  }
                                }
                                reportMatchFailures = savedReportMatchFailuresVar0;
                                if (result23 === null) {
                                  var result21 = '';
                                } else {
                                  var result21 = null;
                                  pos = savedPos3;
                                }
                                if (result21 !== null) {
                                  if (input.length > pos) {
                                    var result22 = input.charAt(pos);
                                    pos++;
                                  } else {
                                    var result22 = null;
                                    if (reportMatchFailures) {
                                      matchFailed('any character');
                                    }
                                  }
                                  if (result22 !== null) {
                                    var result20 = [result21, result22];
                                  } else {
                                    var result20 = null;
                                    pos = savedPos2;
                                  }
                                } else {
                                  var result20 = null;
                                  pos = savedPos2;
                                }
                                var result19 = result20 !== null
                                  ? (function($v) {return $v;})(result20[1])
                                  : null;
                                while (result19 !== null) {
                                  result18.push(result19);
                                  var savedPos2 = pos;
                                  var savedPos3 = pos;
                                  var savedReportMatchFailuresVar0 = reportMatchFailures;
                                  reportMatchFailures = false;
                                  if (input.substr(pos, 1) === ";") {
                                    var result23 = ";";
                                    pos += 1;
                                  } else {
                                    var result23 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\";\"");
                                    }
                                  }
                                  reportMatchFailures = savedReportMatchFailuresVar0;
                                  if (result23 === null) {
                                    var result21 = '';
                                  } else {
                                    var result21 = null;
                                    pos = savedPos3;
                                  }
                                  if (result21 !== null) {
                                    if (input.length > pos) {
                                      var result22 = input.charAt(pos);
                                      pos++;
                                    } else {
                                      var result22 = null;
                                      if (reportMatchFailures) {
                                        matchFailed('any character');
                                      }
                                    }
                                    if (result22 !== null) {
                                      var result20 = [result21, result22];
                                    } else {
                                      var result20 = null;
                                      pos = savedPos2;
                                    }
                                  } else {
                                    var result20 = null;
                                    pos = savedPos2;
                                  }
                                  var result19 = result20 !== null
                                    ? (function($v) {return $v;})(result20[1])
                                    : null;
                                }
                                if (result18 !== null) {
                                  var result15 = [result16, result17, result18];
                                } else {
                                  var result15 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result15 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result15 = null;
                              pos = savedPos1;
                            }
                            var result14 = result15 !== null
                              ? (function($v) {return $v;})(result15[2])
                              : null;
                            var result12 = result14 !== null ? result14 : '';
                            if (result12 !== null) {
                              if (input.substr(pos, 1) === ";") {
                                var result13 = ";";
                                pos += 1;
                              } else {
                                var result13 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\";\"");
                                }
                              }
                              if (result13 !== null) {
                                var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                              } else {
                                var result1 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function($jd, $v, $m, $d, $n, $val) {
                  //get value if exists and remove each existing quote
                  var value = $val !== "" ? $val.join("").replace(/"/g, "").replace(/'/g, "") : null
          
                  //convert the value of int and float datatypes to a number
                  if(value) if($d == "int") value = parseInt(value);
                  if(value) if($d == "float") value = parseFloat(value);
                  
                  return {
                      type: "variable",
                      javaDoc: $jd !== "" ? $jd : null,
                      name: $n,
                      visibility: $v !== "" ? $v : null,
                      modifier: $m,
                      array: $d ? $d.array : null,
                      generic: $d ? $d.generic : null,
                      dataType: $d ? $d.dataType : null,
                      value: value
                  };
              })(result1[0], result1[2], result1[3], result1[4], result1[8], result1[10])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Generic() {
        var cacheKey = 'Generic@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "<") {
          var result2 = "<";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"<\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            var result4 = parse_Identifier();
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                if (input.substr(pos, 1) === ">") {
                  var result6 = ">";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\">\"");
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function($g) {
                  return $g;
              })(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Array() {
        var cacheKey = 'Array@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "[") {
          var result2 = "[";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            if (input.substr(pos, 1) === "]") {
              var result4 = "]";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"]\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function($a) {
                  return ($a && $a != "") ? true : false;
              })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DataType() {
        var cacheKey = 'DataType@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_DataTypeKeyword();
        if (result2 !== null) {
          var result3 = parse___();
          if (result3 !== null) {
            var savedPos2 = pos;
            var result12 = parse_Generic();
            if (result12 !== null) {
              var result13 = parse___();
              if (result13 !== null) {
                var result11 = [result12, result13];
              } else {
                var result11 = null;
                pos = savedPos2;
              }
            } else {
              var result11 = null;
              pos = savedPos2;
            }
            var result10 = result11 !== null
              ? (function($g) {return $g;})(result11[0])
              : null;
            var result4 = result10 !== null ? result10 : '';
            if (result4 !== null) {
              var savedPos1 = pos;
              var result8 = parse_Array();
              if (result8 !== null) {
                var result9 = parse___();
                if (result9 !== null) {
                  var result7 = [result8, result9];
                } else {
                  var result7 = null;
                  pos = savedPos1;
                }
              } else {
                var result7 = null;
                pos = savedPos1;
              }
              var result6 = result7 !== null
                ? (function($a) {return $a;})(result7[0])
                : null;
              var result5 = result6 !== null ? result6 : '';
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function($d, $g, $a) {
                  return {
                      generic: $g !== "" ? $g : null,
                      array: $a !== "" ? $a : false,
                      dataType: $d
                  };
              })(result1[0], result1[2], result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Identifier() {
        var cacheKey = 'Identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[a-zA-Z0-9_$]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z0-9_$]");
          }
        }
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            if (input.substr(pos).match(/^[a-zA-Z0-9_$]/) !== null) {
              var result2 = input.charAt(pos);
              pos++;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z0-9_$]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function($i) {
                  return $i.join("");
              })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_JavaLetter() {
        var cacheKey = 'JavaLetter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[a-zA-Z_$]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z_$]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_JavaDigit() {
        var cacheKey = 'JavaDigit@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Parameter() {
        var cacheKey = 'Parameter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = [];
        var savedPos1 = pos;
        var result9 = parse_ModifierKeyword();
        if (result9 !== null) {
          var result10 = parse___();
          if (result10 !== null) {
            var result8 = [result9, result10];
          } else {
            var result8 = null;
            pos = savedPos1;
          }
        } else {
          var result8 = null;
          pos = savedPos1;
        }
        var result7 = result8 !== null
          ? (function($m) {return $m;})(result8[0])
          : null;
        while (result7 !== null) {
          result2.push(result7);
          var savedPos1 = pos;
          var result9 = parse_ModifierKeyword();
          if (result9 !== null) {
            var result10 = parse___();
            if (result10 !== null) {
              var result8 = [result9, result10];
            } else {
              var result8 = null;
              pos = savedPos1;
            }
          } else {
            var result8 = null;
            pos = savedPos1;
          }
          var result7 = result8 !== null
            ? (function($m) {return $m;})(result8[0])
            : null;
        }
        if (result2 !== null) {
          var result3 = parse_DataType();
          if (result3 !== null) {
            var result4 = parse___();
            if (result4 !== null) {
              var result5 = parse_Identifier();
              if (result5 !== null) {
                var result6 = parse___();
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function($m, $d, $n) {
                  return {
                      type: "parameter",
                      modifier: $m,
                      generic: $d.generic,
                      array: $d.array,
                      dataType: $d.dataType,
                      name: $n
                  };
              })(result1[0], result1[1], result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ParameterList() {
        var cacheKey = 'ParameterList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var savedPos0 = pos;
        var result3 = parse___();
        if (result3 !== null) {
          if (input.substr(pos, 1) === ",") {
            var result7 = ",";
            pos += 1;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\",\"");
            }
          }
          var result4 = result7 !== null ? result7 : '';
          if (result4 !== null) {
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_Parameter();
              if (result6 !== null) {
                var result2 = [result3, result4, result5, result6];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        var result1 = result2 !== null
          ? (function($p) {
                  return $p;
              })(result2[3])
          : null;
        while (result1 !== null) {
          result0.push(result1);
          var savedPos0 = pos;
          var result3 = parse___();
          if (result3 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result7 = ",";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            var result4 = result7 !== null ? result7 : '';
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                var result6 = parse_Parameter();
                if (result6 !== null) {
                  var result2 = [result3, result4, result5, result6];
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function($p) {
                    return $p;
                })(result2[3])
            : null;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_WhiteSpace() {
        var cacheKey = 'WhiteSpace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[	 \xA0\uFEFF]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[	 \\xA0\\uFEFF]");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_Space();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Space() {
        var cacheKey = 'Space@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[ \xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[ \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EndOfLine() {
        var cacheKey = 'EndOfLine@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "\n") {
          var result5 = "\n";
          pos += 1;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\n\"");
          }
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          if (input.substr(pos, 2) === "\r\n") {
            var result4 = "\r\n";
            pos += 2;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\r\\n\"");
            }
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            if (input.substr(pos, 1) === "\r") {
              var result3 = "\r";
              pos += 1;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\r\"");
              }
            }
            if (result3 !== null) {
              var result0 = result3;
            } else {
              if (input.substr(pos, 1) === "\u2028") {
                var result2 = "\u2028";
                pos += 1;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\"\\u2028\"");
                }
              }
              if (result2 !== null) {
                var result0 = result2;
              } else {
                if (input.substr(pos, 1) === "\u2029") {
                  var result1 = "\u2029";
                  pos += 1;
                } else {
                  var result1 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"\\u2029\"");
                  }
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse___() {
        var cacheKey = '__@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result5 = parse_WhiteSpace();
        if (result5 !== null) {
          var result1 = result5;
        } else {
          var result4 = parse_EndOfLine();
          if (result4 !== null) {
            var result1 = result4;
          } else {
            var result3 = parse_MultiLineComment();
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result2 = parse_SingleLineComment();
              if (result2 !== null) {
                var result1 = result2;
              } else {
                var result1 = null;;
              };
            };
          };
        }
        while (result1 !== null) {
          result0.push(result1);
          var result5 = parse_WhiteSpace();
          if (result5 !== null) {
            var result1 = result5;
          } else {
            var result4 = parse_EndOfLine();
            if (result4 !== null) {
              var result1 = result4;
            } else {
              var result3 = parse_MultiLineComment();
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result2 = parse_SingleLineComment();
                if (result2 !== null) {
                  var result1 = result2;
                } else {
                  var result1 = null;;
                };
              };
            };
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MultiLineComment() {
        var cacheKey = 'MultiLineComment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos3 = pos;
        var savedReportMatchFailuresVar1 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 3) === "/**") {
          var result10 = "/**";
          pos += 3;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("\"/**\"");
          }
        }
        reportMatchFailures = savedReportMatchFailuresVar1;
        if (result10 === null) {
          var result2 = '';
        } else {
          var result2 = null;
          pos = savedPos3;
        }
        if (result2 !== null) {
          if (input.substr(pos, 2) === "/*") {
            var result3 = "/*";
            pos += 2;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"/*\"");
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 2) === "*/") {
              var result9 = "*/";
              pos += 2;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"*/\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result9 === null) {
              var result7 = '';
            } else {
              var result7 = null;
              pos = savedPos2;
            }
            if (result7 !== null) {
              if (input.length > pos) {
                var result8 = input.charAt(pos);
                pos++;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos1;
              }
            } else {
              var result6 = null;
              pos = savedPos1;
            }
            while (result6 !== null) {
              result4.push(result6);
              var savedPos1 = pos;
              var savedPos2 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              if (input.substr(pos, 2) === "*/") {
                var result9 = "*/";
                pos += 2;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"*/\"");
                }
              }
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result9 === null) {
                var result7 = '';
              } else {
                var result7 = null;
                pos = savedPos2;
              }
              if (result7 !== null) {
                if (input.length > pos) {
                  var result8 = input.charAt(pos);
                  pos++;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed('any character');
                  }
                }
                if (result8 !== null) {
                  var result6 = [result7, result8];
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
            }
            if (result4 !== null) {
              if (input.substr(pos, 2) === "*/") {
                var result5 = "*/";
                pos += 2;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"*/\"");
                }
              }
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
                  return null;
              })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SingleLineComment() {
        var cacheKey = 'SingleLineComment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "//") {
          var result2 = "//";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"//\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result8 = parse_EndOfLine();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result8 === null) {
            var result6 = '';
          } else {
            var result6 = null;
            pos = savedPos2;
          }
          if (result6 !== null) {
            if (input.length > pos) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed('any character');
              }
            }
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          } else {
            var result5 = null;
            pos = savedPos1;
          }
          while (result5 !== null) {
            result3.push(result5);
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var result8 = parse_EndOfLine();
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result8 === null) {
              var result6 = '';
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            if (result6 !== null) {
              if (input.length > pos) {
                var result7 = input.charAt(pos);
                pos++;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result4 = parse_EndOfLine();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
                  return null;
              })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_JavaDocComment() {
        var cacheKey = 'JavaDocComment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 3) === "/**") {
          var result2 = "/**";
          pos += 3;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"/**\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var result8 = [];
          var savedPos1 = pos;
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 2) === "*/") {
            var result14 = "*/";
            pos += 2;
          } else {
            var result14 = null;
            if (reportMatchFailures) {
              matchFailed("\"*/\"");
            }
          }
          if (result14 !== null) {
            var result12 = result14;
          } else {
            var result13 = parse_JavaDocTag();
            if (result13 !== null) {
              var result12 = result13;
            } else {
              var result12 = null;;
            };
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result12 === null) {
            var result10 = '';
          } else {
            var result10 = null;
            pos = savedPos2;
          }
          if (result10 !== null) {
            if (input.length > pos) {
              var result11 = input.charAt(pos);
              pos++;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed('any character');
              }
            }
            if (result11 !== null) {
              var result9 = [result10, result11];
            } else {
              var result9 = null;
              pos = savedPos1;
            }
          } else {
            var result9 = null;
            pos = savedPos1;
          }
          while (result9 !== null) {
            result8.push(result9);
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 2) === "*/") {
              var result14 = "*/";
              pos += 2;
            } else {
              var result14 = null;
              if (reportMatchFailures) {
                matchFailed("\"*/\"");
              }
            }
            if (result14 !== null) {
              var result12 = result14;
            } else {
              var result13 = parse_JavaDocTag();
              if (result13 !== null) {
                var result12 = result13;
              } else {
                var result12 = null;;
              };
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result12 === null) {
              var result10 = '';
            } else {
              var result10 = null;
              pos = savedPos2;
            }
            if (result10 !== null) {
              if (input.length > pos) {
                var result11 = input.charAt(pos);
                pos++;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result11 !== null) {
                var result9 = [result10, result11];
              } else {
                var result9 = null;
                pos = savedPos1;
              }
            } else {
              var result9 = null;
              pos = savedPos1;
            }
          }
          var result7 = result8 !== null
            ? (function() {return null;})()
            : null;
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result6 = parse_JavaDocTag();
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          while (result5 !== null) {
            result3.push(result5);
            var result8 = [];
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 2) === "*/") {
              var result14 = "*/";
              pos += 2;
            } else {
              var result14 = null;
              if (reportMatchFailures) {
                matchFailed("\"*/\"");
              }
            }
            if (result14 !== null) {
              var result12 = result14;
            } else {
              var result13 = parse_JavaDocTag();
              if (result13 !== null) {
                var result12 = result13;
              } else {
                var result12 = null;;
              };
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result12 === null) {
              var result10 = '';
            } else {
              var result10 = null;
              pos = savedPos2;
            }
            if (result10 !== null) {
              if (input.length > pos) {
                var result11 = input.charAt(pos);
                pos++;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result11 !== null) {
                var result9 = [result10, result11];
              } else {
                var result9 = null;
                pos = savedPos1;
              }
            } else {
              var result9 = null;
              pos = savedPos1;
            }
            while (result9 !== null) {
              result8.push(result9);
              var savedPos1 = pos;
              var savedPos2 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              if (input.substr(pos, 2) === "*/") {
                var result14 = "*/";
                pos += 2;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed("\"*/\"");
                }
              }
              if (result14 !== null) {
                var result12 = result14;
              } else {
                var result13 = parse_JavaDocTag();
                if (result13 !== null) {
                  var result12 = result13;
                } else {
                  var result12 = null;;
                };
              }
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result12 === null) {
                var result10 = '';
              } else {
                var result10 = null;
                pos = savedPos2;
              }
              if (result10 !== null) {
                if (input.length > pos) {
                  var result11 = input.charAt(pos);
                  pos++;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed('any character');
                  }
                }
                if (result11 !== null) {
                  var result9 = [result10, result11];
                } else {
                  var result9 = null;
                  pos = savedPos1;
                }
              } else {
                var result9 = null;
                pos = savedPos1;
              }
            }
            var result7 = result8 !== null
              ? (function() {return null;})()
              : null;
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result6 = parse_JavaDocTag();
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 2) === "*/") {
              var result4 = "*/";
              pos += 2;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"*/\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function($p) {
                  var index = 0;
                  var comment = {};
                  //format array to an more readable object
                  for(var i=0; i<$p.length; i++) {
                      var tag = $p[i].tag;
          
                      if(tag !== "return" || tag !== "since") {
                          ++index;
                          //create specific tag array if doesn't exists
                          if(!comment[tag]) comment[tag] = [];
                          //push tag into array
                          comment[tag].push($p[i]);
                      } else {
                          ++index;
                          //return is only allowed once
                          comment[tag] = $p[i];
                      }
                  }
                  
                  return index == 0 ? null : comment;
              })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_JavaDocTag() {
        var cacheKey = 'JavaDocTag@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result7 = parse_JavaDocParam();
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var result6 = parse_JavaDocReturn();
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var result5 = parse_JavaDocThrows();
            if (result5 !== null) {
              var result0 = result5;
            } else {
              var result4 = parse_JavaDocException();
              if (result4 !== null) {
                var result0 = result4;
              } else {
                var result3 = parse_JavaDocSince();
                if (result3 !== null) {
                  var result0 = result3;
                } else {
                  var result2 = parse_JavaDocAuthor();
                  if (result2 !== null) {
                    var result0 = result2;
                  } else {
                    var result1 = parse_JavaDocSee();
                    if (result1 !== null) {
                      var result0 = result1;
                    } else {
                      var result0 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_JavaDocUML() {
        var cacheKey = 'JavaDocUML@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 4) === "@uml") {
          var result1 = "@uml";
          pos += 4;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"@uml\"");
          }
        }
        if (result1 !== null) {
          var result3 = parse_WhiteSpace();
          if (result3 !== null) {
            var result2 = [];
            while (result3 !== null) {
              result2.push(result3);
              var result3 = parse_WhiteSpace();
            }
          } else {
            var result2 = null;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_JavaDocParam() {
        var cacheKey = 'JavaDocParam@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "@param") {
          var result2 = "@param";
          pos += 6;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"@param\"");
          }
        }
        if (result2 !== null) {
          var result17 = parse_WhiteSpace();
          if (result17 !== null) {
            var result3 = [];
            while (result17 !== null) {
              result3.push(result17);
              var result17 = parse_WhiteSpace();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var savedPos3 = pos;
            var result14 = parse_Identifier();
            if (result14 !== null) {
              var result16 = parse_WhiteSpace();
              if (result16 !== null) {
                var result15 = [];
                while (result16 !== null) {
                  result15.push(result16);
                  var result16 = parse_WhiteSpace();
                }
              } else {
                var result15 = null;
              }
              if (result15 !== null) {
                var result13 = [result14, result15];
              } else {
                var result13 = null;
                pos = savedPos3;
              }
            } else {
              var result13 = null;
              pos = savedPos3;
            }
            var result12 = result13 !== null
              ? (function($n) {return $n;})(result13[0])
              : null;
            var result4 = result12 !== null ? result12 : '';
            if (result4 !== null) {
              var result5 = [];
              var savedPos1 = pos;
              var savedPos2 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              var result11 = parse_EndOfLine();
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result11 === null) {
                var result9 = '';
              } else {
                var result9 = null;
                pos = savedPos2;
              }
              if (result9 !== null) {
                if (input.length > pos) {
                  var result10 = input.charAt(pos);
                  pos++;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed('any character');
                  }
                }
                if (result10 !== null) {
                  var result8 = [result9, result10];
                } else {
                  var result8 = null;
                  pos = savedPos1;
                }
              } else {
                var result8 = null;
                pos = savedPos1;
              }
              var result7 = result8 !== null
                ? (function($d) {return $d;})(result8[1])
                : null;
              while (result7 !== null) {
                result5.push(result7);
                var savedPos1 = pos;
                var savedPos2 = pos;
                var savedReportMatchFailuresVar0 = reportMatchFailures;
                reportMatchFailures = false;
                var result11 = parse_EndOfLine();
                reportMatchFailures = savedReportMatchFailuresVar0;
                if (result11 === null) {
                  var result9 = '';
                } else {
                  var result9 = null;
                  pos = savedPos2;
                }
                if (result9 !== null) {
                  if (input.length > pos) {
                    var result10 = input.charAt(pos);
                    pos++;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed('any character');
                    }
                  }
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos1;
                }
                var result7 = result8 !== null
                  ? (function($d) {return $d;})(result8[1])
                  : null;
              }
              if (result5 !== null) {
                var result6 = parse_EndOfLine();
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function($n, $d) {
                  return {
                      tag: "param",
                      name: $n !== "" ? $n : null,
                      description: $d.length !== 0 ? $d.join("") : null
                  };
              })(result1[2], result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_JavaDocThrows() {
        var cacheKey = 'JavaDocThrows@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 7) === "@throws") {
          var result2 = "@throws";
          pos += 7;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"@throws\"");
          }
        }
        if (result2 !== null) {
          var result17 = parse_WhiteSpace();
          if (result17 !== null) {
            var result3 = [];
            while (result17 !== null) {
              result3.push(result17);
              var result17 = parse_WhiteSpace();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var savedPos3 = pos;
            var result14 = parse_Identifier();
            if (result14 !== null) {
              var result16 = parse_WhiteSpace();
              if (result16 !== null) {
                var result15 = [];
                while (result16 !== null) {
                  result15.push(result16);
                  var result16 = parse_WhiteSpace();
                }
              } else {
                var result15 = null;
              }
              if (result15 !== null) {
                var result13 = [result14, result15];
              } else {
                var result13 = null;
                pos = savedPos3;
              }
            } else {
              var result13 = null;
              pos = savedPos3;
            }
            var result12 = result13 !== null
              ? (function($n) {return $n;})(result13[0])
              : null;
            var result4 = result12 !== null ? result12 : '';
            if (result4 !== null) {
              var result5 = [];
              var savedPos1 = pos;
              var savedPos2 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              var result11 = parse_EndOfLine();
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result11 === null) {
                var result9 = '';
              } else {
                var result9 = null;
                pos = savedPos2;
              }
              if (result9 !== null) {
                if (input.length > pos) {
                  var result10 = input.charAt(pos);
                  pos++;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed('any character');
                  }
                }
                if (result10 !== null) {
                  var result8 = [result9, result10];
                } else {
                  var result8 = null;
                  pos = savedPos1;
                }
              } else {
                var result8 = null;
                pos = savedPos1;
              }
              var result7 = result8 !== null
                ? (function($d) {return $d;})(result8[1])
                : null;
              while (result7 !== null) {
                result5.push(result7);
                var savedPos1 = pos;
                var savedPos2 = pos;
                var savedReportMatchFailuresVar0 = reportMatchFailures;
                reportMatchFailures = false;
                var result11 = parse_EndOfLine();
                reportMatchFailures = savedReportMatchFailuresVar0;
                if (result11 === null) {
                  var result9 = '';
                } else {
                  var result9 = null;
                  pos = savedPos2;
                }
                if (result9 !== null) {
                  if (input.length > pos) {
                    var result10 = input.charAt(pos);
                    pos++;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed('any character');
                    }
                  }
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos1;
                }
                var result7 = result8 !== null
                  ? (function($d) {return $d;})(result8[1])
                  : null;
              }
              if (result5 !== null) {
                var result6 = parse_EndOfLine();
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function($n, $d) {
                  return {
                      tag: "throws",
                      classname: $n !== "" ? $n : null,
                      description: $d.length !== 0 ? $d.join("") : null
                  };
              })(result1[2], result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_JavaDocException() {
        var cacheKey = 'JavaDocException@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 10) === "@exception") {
          var result2 = "@exception";
          pos += 10;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"@exception\"");
          }
        }
        if (result2 !== null) {
          var result17 = parse_WhiteSpace();
          if (result17 !== null) {
            var result3 = [];
            while (result17 !== null) {
              result3.push(result17);
              var result17 = parse_WhiteSpace();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var savedPos3 = pos;
            var result14 = parse_Identifier();
            if (result14 !== null) {
              var result16 = parse_WhiteSpace();
              if (result16 !== null) {
                var result15 = [];
                while (result16 !== null) {
                  result15.push(result16);
                  var result16 = parse_WhiteSpace();
                }
              } else {
                var result15 = null;
              }
              if (result15 !== null) {
                var result13 = [result14, result15];
              } else {
                var result13 = null;
                pos = savedPos3;
              }
            } else {
              var result13 = null;
              pos = savedPos3;
            }
            var result12 = result13 !== null
              ? (function($n) {return $n;})(result13[0])
              : null;
            var result4 = result12 !== null ? result12 : '';
            if (result4 !== null) {
              var result5 = [];
              var savedPos1 = pos;
              var savedPos2 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              var result11 = parse_EndOfLine();
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result11 === null) {
                var result9 = '';
              } else {
                var result9 = null;
                pos = savedPos2;
              }
              if (result9 !== null) {
                if (input.length > pos) {
                  var result10 = input.charAt(pos);
                  pos++;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed('any character');
                  }
                }
                if (result10 !== null) {
                  var result8 = [result9, result10];
                } else {
                  var result8 = null;
                  pos = savedPos1;
                }
              } else {
                var result8 = null;
                pos = savedPos1;
              }
              var result7 = result8 !== null
                ? (function($d) {return $d;})(result8[1])
                : null;
              while (result7 !== null) {
                result5.push(result7);
                var savedPos1 = pos;
                var savedPos2 = pos;
                var savedReportMatchFailuresVar0 = reportMatchFailures;
                reportMatchFailures = false;
                var result11 = parse_EndOfLine();
                reportMatchFailures = savedReportMatchFailuresVar0;
                if (result11 === null) {
                  var result9 = '';
                } else {
                  var result9 = null;
                  pos = savedPos2;
                }
                if (result9 !== null) {
                  if (input.length > pos) {
                    var result10 = input.charAt(pos);
                    pos++;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed('any character');
                    }
                  }
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos1;
                }
                var result7 = result8 !== null
                  ? (function($d) {return $d;})(result8[1])
                  : null;
              }
              if (result5 !== null) {
                var result6 = parse_EndOfLine();
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function($n, $d) {
                  return {
                      tag: "exception",
                      classname: $n !== "" ? $n : null,
                      description: $d.length !== 0 ? $d.join("") : null
                  };
              })(result1[2], result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_JavaDocReturn() {
        var cacheKey = 'JavaDocReturn@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 7) === "@return") {
          var result2 = "@return";
          pos += 7;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"@return\"");
          }
        }
        if (result2 !== null) {
          var result11 = parse_WhiteSpace();
          if (result11 !== null) {
            var result3 = [];
            while (result11 !== null) {
              result3.push(result11);
              var result11 = parse_WhiteSpace();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result4 = [];
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var result10 = parse_EndOfLine();
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result10 === null) {
              var result8 = '';
            } else {
              var result8 = null;
              pos = savedPos2;
            }
            if (result8 !== null) {
              if (input.length > pos) {
                var result9 = input.charAt(pos);
                pos++;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result9 !== null) {
                var result7 = [result8, result9];
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
            var result6 = result7 !== null
              ? (function($d) {return $d;})(result7[1])
              : null;
            while (result6 !== null) {
              result4.push(result6);
              var savedPos1 = pos;
              var savedPos2 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              var result10 = parse_EndOfLine();
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result10 === null) {
                var result8 = '';
              } else {
                var result8 = null;
                pos = savedPos2;
              }
              if (result8 !== null) {
                if (input.length > pos) {
                  var result9 = input.charAt(pos);
                  pos++;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed('any character');
                  }
                }
                if (result9 !== null) {
                  var result7 = [result8, result9];
                } else {
                  var result7 = null;
                  pos = savedPos1;
                }
              } else {
                var result7 = null;
                pos = savedPos1;
              }
              var result6 = result7 !== null
                ? (function($d) {return $d;})(result7[1])
                : null;
            }
            if (result4 !== null) {
              var result5 = parse_EndOfLine();
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function($d) {
                  return {
                      tag: "return",
                      description: $d.length !== 0 ? $d.join("") : null
                  };
              })(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_JavaDocSince() {
        var cacheKey = 'JavaDocSince@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "@since") {
          var result2 = "@since";
          pos += 6;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"@since\"");
          }
        }
        if (result2 !== null) {
          var result11 = parse_WhiteSpace();
          if (result11 !== null) {
            var result3 = [];
            while (result11 !== null) {
              result3.push(result11);
              var result11 = parse_WhiteSpace();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result4 = [];
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var result10 = parse_EndOfLine();
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result10 === null) {
              var result8 = '';
            } else {
              var result8 = null;
              pos = savedPos2;
            }
            if (result8 !== null) {
              if (input.length > pos) {
                var result9 = input.charAt(pos);
                pos++;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result9 !== null) {
                var result7 = [result8, result9];
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
            var result6 = result7 !== null
              ? (function($d) {return $d;})(result7[1])
              : null;
            while (result6 !== null) {
              result4.push(result6);
              var savedPos1 = pos;
              var savedPos2 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              var result10 = parse_EndOfLine();
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result10 === null) {
                var result8 = '';
              } else {
                var result8 = null;
                pos = savedPos2;
              }
              if (result8 !== null) {
                if (input.length > pos) {
                  var result9 = input.charAt(pos);
                  pos++;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed('any character');
                  }
                }
                if (result9 !== null) {
                  var result7 = [result8, result9];
                } else {
                  var result7 = null;
                  pos = savedPos1;
                }
              } else {
                var result7 = null;
                pos = savedPos1;
              }
              var result6 = result7 !== null
                ? (function($d) {return $d;})(result7[1])
                : null;
            }
            if (result4 !== null) {
              var result5 = parse_EndOfLine();
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function($d) {
                  return {
                      tag: "since",
                      description: $d.length !== 0 ? $d.join("") : null
                  };
              })(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_JavaDocAuthor() {
        var cacheKey = 'JavaDocAuthor@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 7) === "@author") {
          var result2 = "@author";
          pos += 7;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"@author\"");
          }
        }
        if (result2 !== null) {
          var result11 = parse_WhiteSpace();
          if (result11 !== null) {
            var result3 = [];
            while (result11 !== null) {
              result3.push(result11);
              var result11 = parse_WhiteSpace();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result4 = [];
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var result10 = parse_EndOfLine();
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result10 === null) {
              var result8 = '';
            } else {
              var result8 = null;
              pos = savedPos2;
            }
            if (result8 !== null) {
              if (input.length > pos) {
                var result9 = input.charAt(pos);
                pos++;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result9 !== null) {
                var result7 = [result8, result9];
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
            var result6 = result7 !== null
              ? (function($d) {return $d;})(result7[1])
              : null;
            while (result6 !== null) {
              result4.push(result6);
              var savedPos1 = pos;
              var savedPos2 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              var result10 = parse_EndOfLine();
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result10 === null) {
                var result8 = '';
              } else {
                var result8 = null;
                pos = savedPos2;
              }
              if (result8 !== null) {
                if (input.length > pos) {
                  var result9 = input.charAt(pos);
                  pos++;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed('any character');
                  }
                }
                if (result9 !== null) {
                  var result7 = [result8, result9];
                } else {
                  var result7 = null;
                  pos = savedPos1;
                }
              } else {
                var result7 = null;
                pos = savedPos1;
              }
              var result6 = result7 !== null
                ? (function($d) {return $d;})(result7[1])
                : null;
            }
            if (result4 !== null) {
              var result5 = parse_EndOfLine();
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function($d) {
                  return {
                      tag: "author",
                      description: $d.length !== 0 ? $d.join("") : null
                  };
              })(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_JavaDocSee() {
        var cacheKey = 'JavaDocSee@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 4) === "@see") {
          var result2 = "@see";
          pos += 4;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"@see\"");
          }
        }
        if (result2 !== null) {
          var result11 = parse_WhiteSpace();
          if (result11 !== null) {
            var result3 = [];
            while (result11 !== null) {
              result3.push(result11);
              var result11 = parse_WhiteSpace();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result4 = [];
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var result10 = parse_EndOfLine();
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result10 === null) {
              var result8 = '';
            } else {
              var result8 = null;
              pos = savedPos2;
            }
            if (result8 !== null) {
              if (input.length > pos) {
                var result9 = input.charAt(pos);
                pos++;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result9 !== null) {
                var result7 = [result8, result9];
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
            var result6 = result7 !== null
              ? (function($d) {return $d;})(result7[1])
              : null;
            while (result6 !== null) {
              result4.push(result6);
              var savedPos1 = pos;
              var savedPos2 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              var result10 = parse_EndOfLine();
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result10 === null) {
                var result8 = '';
              } else {
                var result8 = null;
                pos = savedPos2;
              }
              if (result8 !== null) {
                if (input.length > pos) {
                  var result9 = input.charAt(pos);
                  pos++;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed('any character');
                  }
                }
                if (result9 !== null) {
                  var result7 = [result8, result9];
                } else {
                  var result7 = null;
                  pos = savedPos1;
                }
              } else {
                var result7 = null;
                pos = savedPos1;
              }
              var result6 = result7 !== null
                ? (function($d) {return $d;})(result7[1])
                : null;
            }
            if (result4 !== null) {
              var result5 = parse_EndOfLine();
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function($d) {
                  return {
                      tag: "see",
                      description: $d.length !== 0 ? $d.join("") : null
                  };
              })(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Keyword() {
        var cacheKey = 'Keyword@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result9 = parse_DataTypeKeyword();
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var result8 = parse_ModifierKeyword();
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var result7 = parse_VisibilityKeyword();
            if (result7 !== null) {
              var result0 = result7;
            } else {
              var result6 = parse_UnusedKeyword();
              if (result6 !== null) {
                var result0 = result6;
              } else {
                if (input.substr(pos, 5) === "class") {
                  var result5 = "class";
                  pos += 5;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"class\"");
                  }
                }
                if (result5 !== null) {
                  var result0 = result5;
                } else {
                  if (input.substr(pos, 7) === "extends") {
                    var result4 = "extends";
                    pos += 7;
                  } else {
                    var result4 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"extends\"");
                    }
                  }
                  if (result4 !== null) {
                    var result0 = result4;
                  } else {
                    if (input.substr(pos, 6) === "import") {
                      var result3 = "import";
                      pos += 6;
                    } else {
                      var result3 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"import\"");
                      }
                    }
                    if (result3 !== null) {
                      var result0 = result3;
                    } else {
                      if (input.substr(pos, 9) === "interface") {
                        var result2 = "interface";
                        pos += 9;
                      } else {
                        var result2 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"interface\"");
                        }
                      }
                      if (result2 !== null) {
                        var result0 = result2;
                      } else {
                        if (input.substr(pos, 7) === "package") {
                          var result1 = "package";
                          pos += 7;
                        } else {
                          var result1 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"package\"");
                          }
                        }
                        if (result1 !== null) {
                          var result0 = result1;
                        } else {
                          var result0 = null;;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DataTypeKeyword() {
        var cacheKey = 'DataTypeKeyword@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 7) === "boolean") {
          var result11 = "boolean";
          pos += 7;
        } else {
          var result11 = null;
          if (reportMatchFailures) {
            matchFailed("\"boolean\"");
          }
        }
        if (result11 !== null) {
          var result0 = result11;
        } else {
          if (input.substr(pos, 4) === "byte") {
            var result10 = "byte";
            pos += 4;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("\"byte\"");
            }
          }
          if (result10 !== null) {
            var result0 = result10;
          } else {
            if (input.substr(pos, 4) === "char") {
              var result9 = "char";
              pos += 4;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"char\"");
              }
            }
            if (result9 !== null) {
              var result0 = result9;
            } else {
              if (input.substr(pos, 6) === "double") {
                var result8 = "double";
                pos += 6;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\"double\"");
                }
              }
              if (result8 !== null) {
                var result0 = result8;
              } else {
                if (input.substr(pos, 4) === "enum") {
                  var result7 = "enum";
                  pos += 4;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"enum\"");
                  }
                }
                if (result7 !== null) {
                  var result0 = result7;
                } else {
                  if (input.substr(pos, 5) === "float") {
                    var result6 = "float";
                    pos += 5;
                  } else {
                    var result6 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"float\"");
                    }
                  }
                  if (result6 !== null) {
                    var result0 = result6;
                  } else {
                    if (input.substr(pos, 3) === "int") {
                      var result5 = "int";
                      pos += 3;
                    } else {
                      var result5 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"int\"");
                      }
                    }
                    if (result5 !== null) {
                      var result0 = result5;
                    } else {
                      if (input.substr(pos, 4) === "long") {
                        var result4 = "long";
                        pos += 4;
                      } else {
                        var result4 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"long\"");
                        }
                      }
                      if (result4 !== null) {
                        var result0 = result4;
                      } else {
                        if (input.substr(pos, 5) === "short") {
                          var result3 = "short";
                          pos += 5;
                        } else {
                          var result3 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"short\"");
                          }
                        }
                        if (result3 !== null) {
                          var result0 = result3;
                        } else {
                          if (input.substr(pos, 4) === "void") {
                            var result2 = "void";
                            pos += 4;
                          } else {
                            var result2 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"void\"");
                            }
                          }
                          if (result2 !== null) {
                            var result0 = result2;
                          } else {
                            var result1 = parse_Identifier();
                            if (result1 !== null) {
                              var result0 = result1;
                            } else {
                              var result0 = null;;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ModifierKeyword() {
        var cacheKey = 'ModifierKeyword@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 8) === "abstract") {
          var result7 = "abstract";
          pos += 8;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"abstract\"");
          }
        }
        if (result7 !== null) {
          var result0 = result7;
        } else {
          if (input.substr(pos, 5) === "final") {
            var result6 = "final";
            pos += 5;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"final\"");
            }
          }
          if (result6 !== null) {
            var result0 = result6;
          } else {
            if (input.substr(pos, 6) === "static") {
              var result5 = "static";
              pos += 6;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"static\"");
              }
            }
            if (result5 !== null) {
              var result0 = result5;
            } else {
              if (input.substr(pos, 12) === "synchronized") {
                var result4 = "synchronized";
                pos += 12;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\"synchronized\"");
                }
              }
              if (result4 !== null) {
                var result0 = result4;
              } else {
                if (input.substr(pos, 8) === "volatile") {
                  var result3 = "volatile";
                  pos += 8;
                } else {
                  var result3 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"volatile\"");
                  }
                }
                if (result3 !== null) {
                  var result0 = result3;
                } else {
                  if (input.substr(pos, 9) === "transient") {
                    var result2 = "transient";
                    pos += 9;
                  } else {
                    var result2 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"transient\"");
                    }
                  }
                  if (result2 !== null) {
                    var result0 = result2;
                  } else {
                    if (input.substr(pos, 6) === "native") {
                      var result1 = "native";
                      pos += 6;
                    } else {
                      var result1 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"native\"");
                      }
                    }
                    if (result1 !== null) {
                      var result0 = result1;
                    } else {
                      var result0 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VisibilityKeyword() {
        var cacheKey = 'VisibilityKeyword@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 7) === "default") {
          var result4 = "default";
          pos += 7;
        } else {
          var result4 = null;
          if (reportMatchFailures) {
            matchFailed("\"default\"");
          }
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          if (input.substr(pos, 7) === "private") {
            var result3 = "private";
            pos += 7;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"private\"");
            }
          }
          if (result3 !== null) {
            var result0 = result3;
          } else {
            if (input.substr(pos, 9) === "protected") {
              var result2 = "protected";
              pos += 9;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"protected\"");
              }
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              if (input.substr(pos, 6) === "public") {
                var result1 = "public";
                pos += 6;
              } else {
                var result1 = null;
                if (reportMatchFailures) {
                  matchFailed("\"public\"");
                }
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_UnusedKeyword() {
        var cacheKey = 'UnusedKeyword@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 5) === "const") {
          var result2 = "const";
          pos += 5;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"const\"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 4) === "goto") {
            var result1 = "goto";
            pos += 4;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\"goto\"");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();